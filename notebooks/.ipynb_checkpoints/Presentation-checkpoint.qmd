---
title: Real Estate Dataset -Exploratory and Descriptive Analysis
author:
  - name: "Natacha Iradukunda and Gemima Grace Wishavura"
    affiliation: "Junior Data Analysts"

date: "2025-06-28"
format: 
  revealjs:
    height: 1100
    width: 1200
    center: true
    page-layout: full
    self-contained: true
    transition: slide
    code-fold: true
    code-tools: true
    code-block-bg: true
    code-block-border-left: "#31BAE9"
    number-sections: false
    number-tables: true
    toc: false
    toc-location: left
    toc-title: Contents
jupyter: python3
---

## Introduction

In this notebook, we carry out an in-depth exploratory and descriptive analysis of Real Estate Dataset, a widely used dataset for income prediction tasks based on assesed value,sales ratio ans sales amount attributes.

This phase of analysis is essential for uncovering patterns, detecting potential biases, and gaining intuition about the dataset’s structure before applying any modelling procedures. We examine the distribution of key numerical and categorical variables, investigate relationships between assesed value and sales amount, and use visualizations to summarize insights.


## Objectives


- Understand property value distribution by analyzing the spread of sale amounts and assessed values across the dataset.

- Identify dominant residential property types and examine how frequently each type appears in the market.

- Evaluate location-based performance by comparing sales activity and average prices across top towns.

- Analyze trends over time to observe how sale amounts and assessed values have changed year by year.



## Dataset Overview

This dataset contains information on residential property sales, including details such as:

Sale Amounts and Assessed Values

Sales Ratio (sale price compared to assessed value)

Residential Property Types (e.g., single-family, condo, multi-family)

Towns where properties are located

List Years when properties were recorded or sold

The data provides a foundation for analyzing market value, property types, location trends, and yearly changes in the real estate sector.


```{python}
#| echo: false
import pandas as pd 
import numpy as np 
import os 
import seaborn as sns
import plotly.express as px
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings("ignore")
```
```{python}
#| echo: false
# Get working directory 
current_dir = os.getcwd()

# Go one directory up to the root directory 
project_root_dir = os.path.dirname(current_dir)

data_dir = os.path.join(project_root_dir, 'data')
raw_dir = os.path.join(data_dir,'raw')
processed_dir = os.path.join(data_dir,'processed')

# Define paths to results folder 
results_dir = os.path.join(project_root_dir,'results')

# Define paths to docs folder 
docs_dir = os.path.join(project_root_dir,'docs') 

#Create directories if they do not exist 
os.makedirs(raw_dir,exist_ok= True)
os.makedirs(processed_dir,exist_ok= True)
os.makedirs(results_dir,exist_ok= True)
os.makedirs(data_dir,exist_ok= True)
```

```{python}
#| echo : false
#| output: false
real_estate_filename = os.path.join(processed_dir, 'real_estate_cleaned.csv')
real_estate = pd.read_csv(real_estate_filename)
real_estate
```

## Key Insights from  Visualisations.
Sale Prices Are Right-Skewed
Most properties were sold between $150,000–$200,000, with fewer high-end transactions. The distribution suggests median sale prices are more representative than the mean due to outliers.

Sales Ratio Mostly Below 1.0
The majority of properties sold for less than their assessed value, with a peak sales ratio around 0.65. This may indicate consistent over-assessment or buyer negotiation power.

Single-Family Homes Dominate
Over 70% of listings are single-residence homes. This strong dominance suggests a market centered on individual homeownership rather than multi-family housing.

Bridgeport Leads in Activity
Bridgeport had the highest number of property transactions (~6,000), far ahead of other towns, indicating a high-turnover, potentially affordable and active housing market.

Post-2018 Market Acceleration
Both Assessed Values and Sale Amounts increased sharply from 2018 to 2019, showing a strong upward trend in market activity and valuation.

## Number of Properties By Sales Amount


```{python}
#| echo : false
#| output: false
```

```{python}
#| warning: false
# Create the histogram
fig = px.histogram(
    real_estate,
    x='Sale Amount',
    nbins=30,
    title='Distribution of Sale Amounts',
    labels={'Sale Amount': 'Sale Amount'},
    color_discrete_sequence=['skyblue']
)

# Update layout for better visuals
fig.update_layout(
    xaxis_title='Sale Amount',
    yaxis_title='Number of Properties',
    bargap=0.1,
    template='plotly_white'
)

# Make responsive and show hover/click info
fig.show(config={"responsive": True})

fig.write_image(os.path.join(results_dir, 'Distribution_of_Sale_Amounts.jpg'))
fig.write_image(os.path.join(results_dir, 'Distribution_of_Sale_Amounts.png'))


```

## Number of Properties by Residential Type


```{python}
#| echo : false
#| output: false
```

```{python}
#| echo : false
# Count the number of properties per Residential Type
res_type_counts = real_estate['Residential Type'].value_counts().reset_index()
res_type_counts.columns = ['Residential Type', 'Count']

# Create bar chart
fig = px.bar(
    res_type_counts,
    x='Residential Type',
    y='Count',
    title='Count of Each Residential Type',
    color_discrete_sequence=['#1f77b4']
)

fig.update_layout(
    xaxis_title='Residential Type',
    yaxis_title='Number of Properties',
    xaxis_tickangle=30,
    template='plotly_white'
)

# Show interactive chart
fig.show(config={"responsive": True})

# Save images
fig.write_image(os.path.join(results_dir, 'Count_of_Each_Residential_Type.jpg'))
fig.write_image(os.path.join(results_dir, 'Count_of_Each_Residential_Type.png'))


```



## Number of Properties By Sales Ratio

```{python}
#| echo : false
#| output: false
```

```{python}
#| warning: false
# Create histogram of Sales Ratio
fig = px.histogram(
    real_estate,
    x='Sales Ratio',
    nbins=30,
    title='Distribution of Sales Ratio',
    labels={'Sales Ratio': 'Sales Ratio'},
    color_discrete_sequence=['skyblue']
)

fig.update_layout(
    xaxis_title='Sales Ratio',
    yaxis_title='Number of Properties',
    bargap=0.1,
    template='plotly_white'
)

fig.show(config={"responsive": True})

# Save images
fig.write_image(os.path.join(results_dir, 'Distribution_of_Sales_Ratio.jpg'))
fig.write_image(os.path.join(results_dir, 'Distribution_of_Sales_Ratio.png'))

```

## Test
### We want to determine whether the average Sales Ratio significantly differs across categories like single-residence, appartments, duplex-residence, etc.

```{python}
#| echo : false
#| output: false
```

```{python}
#| label: test-sales-ratio-residential-type
#| echo: true
#| warning: false

import pandas as pd
import scipy.stats as stats
import seaborn as sns
import matplotlib.pyplot as plt

# Filter the relevant columns
data = real_estate[['Sales Ratio', 'Residential Type']].dropna()

# Group into lists per category
groups = [group['Sales Ratio'].values for name, group in data.groupby('Residential Type')]

# Visualize distributions
plt.figure(figsize=(10, 5))
sns.boxplot(x='Residential Type', y='Sales Ratio', data=data, palette='pastel')
plt.title('Sales Ratio Distribution by Residential Type')
plt.xticks(rotation=15)
plt.tight_layout()
plt.show()

# Check normality (Shapiro test for one group example)
normality_test = stats.shapiro(groups[0])  # just one group
print(f"Shapiro-Wilk test on one group: p-value = {normality_test.pvalue:.4f}")

# Levene's Test for equal variances
levene_test = stats.levene(*groups)
print(f"Levene’s Test for Equal Variances: p-value = {levene_test.pvalue:.4f}")

# One-way ANOVA
anova_result = stats.f_oneway(*groups)
print(f"\nOne-Way ANOVA Result:")
print(f"F-statistic = {anova_result.statistic:.4f}, p-value = {anova_result.pvalue:.4f}")

# Kruskal-Wallis Test (non-parametric)
kruskal_result = stats.kruskal(*groups)
print(f"\nKruskal-Wallis H-test Result:")
print(f"H-statistic = {kruskal_result.statistic:.4f}, p-value = {kruskal_result.pvalue:.4f}")

```
## Interpretation
These tests together confirm strong evidence that Sales Ratios vary significantly by Residential Type:

The ANOVA and Kruskal-Wallis tests both show p-values < 0.05 (in fact, 0.0000), indicating the differences between groups are statistically significant.

Since data is not normally distributed and variances are not equal, Kruskal-Wallis is more reliable here — and it agrees with ANOVA.

This supports what you visually observed (e.g., non-overlapping medians, wide IQRs, distinct group behaviors).

## Recommendation
Tailor pricing and investment strategies by residential type.

Since sales ratios vary significantly between property types (e.g., single-family, duplex, triplex), investors, assessors, and policy makers should avoid using a one-size-fits-all valuation or pricing model.

Instead, they should:

Apply residential-type-specific benchmarks when evaluating sale performance.

Pay extra attention to types with high variance or low medians (e.g., quadplexes), as these may indicate inconsistent returns or pricing inefficiencies.

Consider deeper location-based segmentation (e.g., average sales ratio by town and type) to refine insights further.

## Sales by Top 20 Towns

```{python}
#| echo : false
#| output: false
```

```{python}
#| warning: false
# Get top 20 towns by count
top_towns = real_estate['Town'].value_counts().nlargest(20).reset_index()
top_towns.columns = ['Town', 'Count']

# Create bar chart
fig = px.bar(
    top_towns,
    x='Town',
    y='Count',
    title='Top 20 Towns by Number of Sales',
    color_discrete_sequence=['skyblue']
)

fig.update_layout(
    xaxis_title='Town',
    yaxis_title='Number of Sales',
    xaxis_tickangle=45,
    template='plotly_white'
)

fig.show(config={"responsive": True})

# Save images
fig.write_image(os.path.join(results_dir, 'Top_20_Towns_by_Number_of_Sales.jpg'))
fig.write_image(os.path.join(results_dir, 'Top_20_Towns_by_Number_of_Sales.png'))

```

## Averagae Sales Ratio By Town

```{python}
#| echo : false
#| output: false
```
```{python}
#| warning: false
# Calculate average sales ratio by Town and Residential Type
avg_sales_ratio = real_estate.groupby(['Town', 'Residential Type'])['Sales Ratio'].mean().reset_index()

# Select top 5 towns by number of sales
top_towns = real_estate['Town'].value_counts().nlargest(5).index
avg_sales_ratio_top = avg_sales_ratio[avg_sales_ratio['Town'].isin(top_towns)]

# Create grouped bar chart
fig = px.bar(
    avg_sales_ratio_top,
    x='Town',
    y='Sales Ratio',
    color='Residential Type',
    barmode='group',
    title='Average Sales Ratio per Town by Residential Type (Top 5 Towns)',
    color_discrete_sequence=px.colors.sequential.Blues
)

fig.update_layout(
    xaxis_title='Town',
    yaxis_title='Average Sales Ratio',
    xaxis_tickangle=45,
    template='plotly_white',
    legend_title_text='Residential Type'
)

fig.show(config={"responsive": True})

# Save images
fig.write_image(os.path.join(results_dir, 'income_distribution_by_agegroup_bar_plot.jpg'))
fig.write_image(os.path.join(results_dir, 'income_distribution_by_agegroup_bar_plot.png'))



```

## Average Sale Amount By List Year 

```{python}
#| echo : false
#| output: false
```
```{python}
#| warning: false
# Plot
# Group and average
avg_sale_by_year = real_estate.groupby('List Year', as_index=False)['Sale Amount'].mean()

# Create line chart with markers
fig = px.line(
    avg_sale_by_year,
    x='List Year',
    y='Sale Amount',
    title='Average Sale Amount by List Year',
    markers=True,
    line_shape='linear',
    color_discrete_sequence=['teal']
)

fig.update_layout(
    xaxis_title='List Year',
    yaxis_title='Average Sale Amount',
    xaxis=dict(tickmode='linear', tickvals=avg_sale_by_year['List Year']),
    template='plotly_white'
)

fig.show(config={"responsive": True})

# Save images
fig.write_image(os.path.join(results_dir, 'Average_Sale_Amount_by_List_Year.jpg'))
fig.write_image(os.path.join(results_dir, 'Average_Sale_Amount_by_List_Year.png'))

```

## Average Assessed Value By List Year

```{python}
#| echo : false
#| output: false
```
```{python}
#| warning: false

# Plot
# Group and average
avg_sale_by_year = real_estate.groupby('List Year', as_index=False)['Assessed Value'].mean()

# Create line chart
fig = px.line(
    avg_sale_by_year,
    x='List Year',
    y='Assessed Value',
    title='Average Assessed Value by List Year',
    markers=True,
    line_shape='linear',
    color_discrete_sequence=['teal']
)

fig.update_layout(
    xaxis_title='List Year',
    yaxis_title='Average Assessed Value',
    xaxis=dict(tickmode='linear', tickvals=avg_sale_by_year['List Year']),
    template='plotly_white'
)

fig.show(config={"responsive": True})

# Save images
fig.write_image(os.path.join(results_dir, 'Average_Assessed_Value_by_List_Year.jpg'))
fig.write_image(os.path.join(results_dir, 'Average_Assessed_Value_by_List_Year.png'))


```

## Residential Type Distribution


```{python}
#| echo : false
#| output: false
```

```{python}
#| warning: false
# Prepare data
res_cat_counts = real_estate['Residential Type'].value_counts().reset_index()
res_cat_counts.columns = ['Residential Type', 'Count']

# Create pie chart
fig = px.pie(
    res_cat_counts,
    names='Residential Type',
    values='Count',
    title='Residential Type Distribution',
    color_discrete_sequence=px.colors.sequential.Blues,
    hole=0
)

# Show values inside slices
fig.update_traces(
    textinfo='percent+label',
    textposition='inside',
    insidetextorientation='radial'
)

# Update layout: increase figure size
fig.update_layout(
    template='plotly_white',
    width=800,
    height=600
)

fig.show(config={"responsive": True})

# Save images
fig.write_image(os.path.join(results_dir, 'Residential_Type_Distribution.jpg'))
fig.write_image(os.path.join(results_dir, 'Residential_Type_Distribution.png'))


```
## Recommendations
Based on our exploratory and statistical analysis of the real estate dataset, we offer the following key recommendations:

Review Assessment Accuracy
Since most properties are sold for less than their assessed values (with Sales Ratios centered around ~0.65), valuation practices may need recalibration to better reflect actual market prices.

Prioritize High-Demand Residential Types
Single-residence and duplex properties generally achieve higher sales ratios. Investors and planners should focus more on these categories for better returns and housing alignment.

Capitalize on High-Activity Towns
Towns like Bridgeport and Hamden show high transaction volumes, indicating vibrant markets. These areas offer strong potential for targeted investment, development, or policy focus.

Track Market Shifts Over Time
The post-2018 surge in both sale amounts and assessed values shows how property markets evolve. Year-over-year tracking is essential to anticipate price movements and demand trends.



## Conclusion
This analysis of the real estate dataset has uncovered key insights into property valuation trends, sales patterns, and market behavior.

Most properties tend to sell below their assessed values, with significant variation across residential types and locations.

Single-family homes dominate the market, and towns like Bridgeport and Hamden emerge as hotspots for real estate activity.

The sharp increase in both assessed and sale values after 2018 suggests a market rebound or adjustment period. 

These findings provide a strong foundation for data-driven decisions in valuation, investment, and urban planning.

## Thank You!

